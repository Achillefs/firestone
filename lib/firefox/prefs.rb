# A ruby interface to Firefox Prefs.js
module Firefox
  class Prefs
    # default prefs.js banner
    BANNER = %{# Mozilla User Preferences

/* Do not edit this file.
 *
 * If you make changes to this file while the application is running,
 * the changes will be overwritten when the application exits.
 *
 * To make a manual change to preferences, you can visit the URL about:config
 */

}
    
    attr_accessor :prefs, :raw_prefs, :path
    
    def initialize path_to_prefs
      @path = path_to_prefs
      @prefs = {}
      @types = {}
      parse_prefs!
    end
    
    def write! path
      File.open(path,'w') { |f| f.write(stringified_prefs) }
    end
    
    def stringified_prefs
      string = ''
      string << BANNER
      string << @prefs.map { |key,val| 
        %{user_pref("#{key}", #{val.is_a?(String) ? %{"#{val}"} : val});}
      }.join("\n")
      string << "\n"
    end
    
    def method_missing name, *args, &block
      if @prefs.respond_to?(name)
        @prefs.send(name,*args)
      else
        super
      end
    end
  protected
    def parse_prefs!
      File.open(path).each_line do |p|
        hits = p.scan /user_pref\("([^"]*)",([^\)]*)\)\;/
        if hits
          key,val = hits.first
          @types[key] = find_type(val)
          @prefs[key] = typecast(key,val) unless key.nil?
        end
      end
    end
    
    def find_type value
      case value
      when /^ "/
        'string'
      when ' true'
        'true'
      when ' false'
        'false'
      else
        'integer'
      end
    end
    
    def typecast key,value
      value = value.strip.gsub(/^"/,'').strip.gsub(/"$/,'')
      case @types[key]
      when 'integer'
        value.to_i
      when 'string'
        value
      when 'true'
        true
      when 'false'
        false
      else
        value
      end
    end
  end
end